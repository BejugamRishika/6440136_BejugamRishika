1. JavaScript Basics & Setup
index.html
<script src="main.js"></script>

main.js
console.log("Welcome to the Community Portal");

window.onload = () => {
  alert("Page fully loaded!");
};

2. Syntax, Data Types, and Operators
const eventName = "Music Night";
const eventDate = "2025-06-20";
let seats = 50;

console.log(`${eventName} is on ${eventDate}. Seats left: ${seats}`);

// Simulate registration
seats--;
console.log(`After registration, seats left: ${seats}`);

 3. Conditionals, Loops, and Error Handling
const events = [
  { name: "Art Expo", date: "2025-06-01", seats: 0 },
  { name: "Coding Camp", date: "2025-08-10", seats: 20 }
];

events.forEach(event => {
  const isUpcoming = new Date(event.date) > new Date();
  if (isUpcoming && event.seats > 0) {
    console.log(`${event.name} is available.`);
  } else {
    console.log(`${event.name} is hidden.`);
  }
});

try {
  const event = events[0];
  if (event.seats <= 0) throw new Error("No seats available");
  event.seats--;
} catch (e) {
  console.error(e.message);
}

 4. Functions, Scope, Closures, Higher-Order Functions
function addEvent(name, date, category) {
  return { name, date, category, seats: 50 };
}

function registerUser(event) {
  if (event.seats > 0) event.seats--;
}

function filterEventsByCategory(events, category) {
  return events.filter(e => e.category === category);
}

// Closure to track category-wise registrations
function categoryCounter() {
  let count = 0;
  return () => ++count;
}

const trackMusicRegs = categoryCounter();
console.log("Music regs: ", trackMusicRegs());

const searchEvents = (events, callback) => events.filter(callback);

 5. Objects and Prototypes
function Event(name, date, seats) {
  this.name = name;
  this.date = date;
  this.seats = seats;
}

Event.prototype.checkAvailability = function() {
  return this.seats > 0;
};

const concert = new Event("Jazz Night", "2025-07-15", 10);
console.log(concert.checkAvailability());

console.log(Object.entries(concert));

6. Arrays and Methods
let events = [];

events.push({ name: "Dance Show", category: "music" });
events.push({ name: "Painting Workshop", category: "art" });

const musicEvents = events.filter(e => e.category === "music");
const displayCards = events.map(e => `Event: ${e.name}`);

console.log(musicEvents);
console.log(displayCards);

7. DOM Manipulation
const container = document.querySelector("#eventContainer");

const event = { name: "Yoga Day", date: "2025-06-21" };
const card = document.createElement("div");
card.textContent = `${event.name} on ${event.date}`;
container.appendChild(card);

document.querySelector("#registerBtn").onclick = () => {
  alert("Registered successfully!");
};

document.querySelector("#categoryFilter").onchange = (e) => {
  console.log("Filter selected: ", e.target.value);
};

document.querySelector("#searchInput").onkeydown = (e) => {
  console.log("Key pressed: ", e.key);
};

 9. Async JS, Promises, Async/Await
// With then/catch
fetch("events.json")
  .then(res => res.json())
  .then(data => console.log(data))
  .catch(err => console.error("Fetch failed", err));

// With async/await
async function fetchEvents() {
  try {
    document.getElementById("loading").style.display = "block";
    const res = await fetch("events.json");
    const data = await res.json();
    console.log(data);
  } catch (e) {
    console.error("Error loading events", e);
  } finally {
    document.getElementById("loading").style.display = "none";
  }
}

 10. Modern JavaScript Features
const event = {
  name: "Poetry Slam",
  date: "2025-09-01",
  seats: 30
};

function showEvent({ name, date = "TBD" }) {
  console.log(`${name} on ${date}`);
}

const clone = [...[event]];

showEvent(event);

 11. Working with Forms
document.querySelector("#registerForm").addEventListener("submit", function(e) {
  e.preventDefault();
  const name = this.elements["name"].value;
  const email = this.elements["email"].value;
  const selectedEvent = this.elements["event"].value;

  if (!name || !email) {
    document.getElementById("error").textContent = "All fields required!";
    return;
  }

  console.log("Form submitted:", { name, email, selectedEvent });
});

12. AJAX & Fetch API
document.querySelector("#submitBtn").onclick = () => {
  const user = { name: "Ravi", event: "Hackathon" };

  fetch("https://jsonplaceholder.typicode.com/posts", {
    method: "POST",
    body: JSON.stringify(user),
    headers: { "Content-Type": "application/json" }
  })
    .then(res => res.json())
    .then(data => {
      console.log("Success:", data);
      setTimeout(() => alert("Registration confirmed!"), 2000);
    })
    .catch(err => console.error("Submission error:", err));
};

 13. Debugging and Testing
document.querySelector("#debugForm").addEventListener("submit", function(e) {
  e.preventDefault();
  console.log("Submitting form...");

  const data = { name: "Test", email: "test@test.com" };

  fetch("/submit", {
    method: "POST",
    body: JSON.stringify(data),
    headers: { "Content-Type": "application/json" }
  }).then(res => {
    console.log("Response received");
    return res.json();
  }).then(result => {
    console.log("Result:", result);
  }).catch(err => {
    console.error("Error:", err);
  });
});

14. jQuery and JS Frameworks
html
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

Javascript
$("#registerBtn").click(() => {
  alert("jQuery Registered!");
});

$(".event-card").fadeOut(1000).fadeIn(1000);

// Benefit of frameworks:
console.log("Frameworks like React/Vue help with UI state management and reactivity.");
